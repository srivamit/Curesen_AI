#include <WiFi.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <MAX30105.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

// Configuration
const char* ssid = "edo_net";
const char* password = "edorer11";
#define MAX30102_SDA 7
#define MAX30102_SCL 9
#define MPU6050_SDA 6
#define MPU6050_SCL 5
#define ONE_WIRE_BUS 4
#define WS_PORT 81
#define WIFI_TIMEOUT 30000
#define WIFI_RECONNECT_INTERVAL 5000

// Sensor Configuration
#define IR_THRESHOLD 2500
#define SAMPLE_AVERAGE 4
#define DYNAMIC_THRESHOLD_FACTOR 0.6
#define BPM_WINDOW 15000           // 15-second window for BPM calculation
#define TEMP_UPDATE_INTERVAL 5000  // 5 seconds
#define FALL_THRESHOLD_LOW 0.6     // Lower threshold for free-fall (in g)
#define FALL_THRESHOLD_HIGH 2.5    // Upper threshold for impact (in g)
#define FALL_WINDOW 500            // Time window for fall detection (ms)

WebSocketsServer webSocket(WS_PORT);
MAX30105 particleSensor;
Adafruit_MPU6050 mpu;

// Setup OneWire and Dallas Temperature
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature tempSensor(&oneWire);

struct SensorData {
  float bpm = 0;
  float spo2 = 0;
  float temperature = 0;
  bool bpmValid = false;
  bool tempValid = false;
  bool fallDetected = false;
  unsigned long beatTimestamps[60];
  byte beatIndex = 0;
} sensorData;

// Heart Rate Variables
volatile long lastBeat = 0;
float irACValue = 0;
float irDCMovingAvg = 0;
float dynamicThreshold = IR_THRESHOLD;
enum TempState { TEMP_IDLE, TEMP_REQUESTED };
TempState tempState = TEMP_IDLE;
unsigned long tempRequestTime = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("\nESP32-C3 Wrist Monitor Initializing...");

  initTemperatureSensor();
  initMAX30102();
  initMPU6050();
  initWiFi();
  initWebSocket();
}

void loop() {
  webSocket.loop();
  maintainWiFi();

  static unsigned long lastSensorCheck = 0;
  if (millis() - lastSensorCheck > 15000) {
    lastSensorCheck = millis();
    if (particleSensor.getIR() < 1000) {
      Serial.println("Reinitializing MAX30102...");
      initMAX30102();
    }
    if (!mpu.getEvent(NULL, NULL, NULL)) {
      Serial.println("Reinitializing MPU6050...");
      initMPU6050();
    }
  }

  readSensorData();
  readTemperature();
  readMPU6050();
  sendSensorData();
  delay(10);
}

void initMAX30102() {
  Serial.println("Initializing MAX30102...");
  Wire.begin(MAX30102_SDA, MAX30102_SCL);

  for (int attempt = 1; attempt <= 5; attempt++) {
    if (particleSensor.begin(Wire, I2C_SPEED_FAST)) {
      Serial.println("Sensor connected!");
      particleSensor.setup(255, SAMPLE_AVERAGE, 2, 400, 411, 16384);
      particleSensor.setPulseAmplitudeRed(0x2F);
      particleSensor.setPulseAmplitudeIR(0x2F);
      particleSensor.enableAFULL();
      irDCMovingAvg = particleSensor.getIR();
      memset(sensorData.beatTimestamps, 0, sizeof(sensorData.beatTimestamps));
      sensorData.beatIndex = 0;
      sensorData.bpm = 0;
      sensorData.bpmValid = false;
      return;
    }
    Serial.printf("Attempt %d failed, retrying...\n", attempt);
    delay(1000);
  }
  Serial.println("Sensor initialization failed");
}

void initTemperatureSensor() {
  Serial.println("Initializing DS18B20 temperature sensor...");
  tempSensor.begin();
  tempState = TEMP_IDLE;
  sensorData.tempValid = false;
}

void initMPU6050() {
  Serial.println("Initializing MPU6050...");
  Wire.begin(MPU6050_SDA, MPU6050_SCL);
  if (mpu.begin()) {
    Serial.println("MPU6050 connected!");
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
    sensorData.fallDetected = false;
  } else {
    Serial.println("MPU6050 initialization failed");
  }
}

void readTemperature() {
  switch (tempState) {
    case TEMP_IDLE:
      if (millis() - tempRequestTime >= TEMP_UPDATE_INTERVAL) {
        tempSensor.requestTemperatures();
        tempRequestTime = millis();
        tempState = TEMP_REQUESTED;
      }
      break;
    case TEMP_REQUESTED:
      if (millis() - tempRequestTime >= 750) {
        float newTemp = tempSensor.getTempCByIndex(0);
        if (newTemp != DEVICE_DISCONNECTED_C) {
          if (!sensorData.tempValid) {
            sensorData.temperature = newTemp;
            sensorData.tempValid = true;
          } else {
            sensorData.temperature = sensorData.temperature * 0.7 + newTemp * 0.3;
          }
        } else {
          Serial.println("Temperature sensor error");
          sensorData.tempValid = false;
        }
        tempState = TEMP_IDLE;
      }
      break;
  }
}

void readSensorData() {
  long rawIR = particleSensor.getIR();
  if (rawIR > 5000) {
    irACValue = rawIR - irDCMovingAvg;
    irDCMovingAvg = irDCMovingAvg * 0.95 + rawIR * 0.05;
    dynamicThreshold = DYNAMIC_THRESHOLD_FACTOR * irDCMovingAvg;
    processHeartRate(rawIR);
    processSpO2(rawIR);
  }
}

void processHeartRate(long irValue) {
  static bool peakDetected = false;
  static unsigned long lastPeakTime = 0;
  const unsigned long minInterval = 250;
  const float MIN_AC_THRESHOLD = 50.0;
  if ((millis() - lastPeakTime) > minInterval) {
    if (fabs(irACValue) > MIN_AC_THRESHOLD && !peakDetected) {
      peakDetected = true;
      lastPeakTime = millis();
      sensorData.beatTimestamps[sensorData.beatIndex] = lastPeakTime;
      sensorData.beatIndex = (sensorData.beatIndex + 1) % 60;
      Serial.printf("Beat detected at %lu ms (abs(irACValue)=%.2f)\n", lastPeakTime, fabs(irACValue));
    }
  }
  if (fabs(irACValue) < MIN_AC_THRESHOLD * 0.8) {
    peakDetected = false;
  }
}

void processSpO2(long irValue) {
  long red = particleSensor.getRed();
  if (red > 1000 && irValue > 1000) {
    static float spo2Filtered = 95.0;
    float ratio = (float)red / (float)irValue;
    float spo2 = 110.0 - 25.0 * ratio;
    spo2 = constrain(spo2, 70, 100);
    spo2Filtered = spo2Filtered * 0.9 + spo2 * 0.1;
    sensorData.spo2 = spo2Filtered;
  }
}

void readMPU6050() {
  sensors_event_t a, g, temp;
  if (mpu.getEvent(&a, &g, &temp)) {
    float accelMagnitude = sqrt(a.acceleration.x * a.acceleration.x +
                                a.acceleration.y * a.acceleration.y +
                                a.acceleration.z * a.acceleration.z) / 9.81;

    static bool freeFall = false;
    static unsigned long freeFallStart = 0;

    // Detect free-fall (low acceleration)
    if (accelMagnitude < FALL_THRESHOLD_LOW && !freeFall) {
      freeFall = true;
      freeFallStart = millis();
    }

    // Detect impact (high acceleration) within fall window
    if (freeFall && accelMagnitude > FALL_THRESHOLD_HIGH && (millis() - freeFallStart) < FALL_WINDOW) {
      sensorData.fallDetected = true;
      Serial.println("Fall detected!");
    }

    // Reset free-fall if no impact within window
    if (freeFall && (millis() - freeFallStart) > FALL_WINDOW) {
      freeFall = false;
    }
  }
}

void sendSensorData() {
  static unsigned long lastSend = 0;
  if (millis() - lastSend >= 250) {
    lastSend = millis();

    unsigned long currentTime = millis();
    int beatCount = 0;
    for (byte i = 0; i < 60; i++) {
      if (sensorData.beatTimestamps[i] != 0 && (currentTime - sensorData.beatTimestamps[i]) <= BPM_WINDOW) {
        beatCount++;
      }
    }
    sensorData.bpm = beatCount * 4;

    StaticJsonDocument<200> doc;
    doc["bpm"] = sensorData.bpm;
    doc["spo2"] = sensorData.spo2;
    doc["temp"] = sensorData.tempValid ? sensorData.temperature : 0;
    doc["ir"] = particleSensor.getIR();
    doc["fall"] = sensorData.fallDetected;
    doc["connected"] = (WiFi.status() == WL_CONNECTED);
    doc["rssi"] = WiFi.RSSI();

    String json;
    serializeJson(doc, json);

    if (webSocket.connectedClients() > 0) {
      webSocket.broadcastTXT(json);
    }

    Serial.printf("SpO2: %.1f%% | IR: %d | Temp: %.1fÂ°C | BPM: %.1f | Fall: %d\n",
                  sensorData.spo2, particleSensor.getIR(), sensorData.temperature, sensorData.bpm, sensorData.fallDetected);

    // Reset fallDetected after sending
    sensorData.fallDetected = false;
  }
}

void initWiFi() {
  Serial.printf("Connecting to %s\n", ssid);
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  unsigned long startAttempt = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttempt < WIFI_TIMEOUT) {
    Serial.print(".");
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected! IP: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nConnection failed");
  }
}

void maintainWiFi() {
  static unsigned long lastReconnectAttempt = 0;
  if (WiFi.status() != WL_CONNECTED && millis() - lastReconnectAttempt > WIFI_RECONNECT_INTERVAL) {
    lastReconnectAttempt = millis();
    WiFi.disconnect();
    WiFi.begin(ssid, password);
  }
}

void initWebSocket() {
  webSocket.begin();
  webSocket.onEvent([](uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
    switch (type) {
      case WStype_CONNECTED:
        Serial.printf("Client %u connected\n", num);
        break;
      case WStype_DISCONNECTED:
        Serial.printf("Client %u disconnected\n", num);
        break;
      case WStype_TEXT:
        handleWebSocketMessage(num, payload, length);
        break;
    }
  });
  Serial.println("WebSocket started on port " + String(WS_PORT));
}

void handleWebSocketMessage(uint8_t num, uint8_t* payload, size_t length) {
  String message = String((char*)payload, length);
  Serial.printf("Message from %u: %s\n", num, message.c_str());

  if (message == "reset") {
    initMAX30102();
    initTemperatureSensor();
    initMPU6050();
    webSocket.sendTXT(num, "Sensors reset");
  }
}