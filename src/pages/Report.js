import React, { useState, useEffect } from 'react';
import styled from '@emotion/styled';
import { jsPDF } from 'jspdf';
import { FiDownload, FiShare2 } from 'react-icons/fi';

const ReportContainer = styled.div`
  padding: 20px;
  margin-top: 70px;
`;

const ReportButton = styled.button`
  background-color: var(--accent-color);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  cursor: pointer;
  font-size: 16px;
  margin: 20px 0;
  
  &:hover {
    opacity: 0.9;
  }
`;

const ReportContent = styled.div`
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 20px;
  margin-top: 20px;
`;

const ButtonGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  margin: 24px auto;
  justify-content: center;
  width: 100%;
  max-width: 500px;
  
  @media (max-width: 480px) {
    flex-direction: column;
    padding: 0 10px;
  }
`;

const ActionButton = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  background-color: ${props => props.primary ? 'var(--accent-color)' : 'var(--success-color)'};
  color: white;
  border: none;
  border-radius: 8px;
  padding: 14px 20px;
  cursor: pointer;
  font-size: 16px;
  min-width: 180px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  
  @media (max-width: 480px) {
    width: 100%;
    margin-bottom: 10px;
    padding: 16px 20px;
  }
  
  &:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    transition: all 0.2s ease;
  }
`;

const VitalLabel = styled.span`
  color: #1976d2;
  font-weight: bold;
`;

const TimeStamp = styled.p`
  color: #1976d2;
  font-weight: bold;
  margin-top: 16px;
`;

const Report = () => {
  const [report, setReport] = useState(null);
  const [showReport, setShowReport] = useState(false);

  useEffect(() => {
    const savedReport = localStorage.getItem('latestReport');
    if (savedReport) {
      setReport(JSON.parse(savedReport));
    }
  }, []);

  const handleViewReport = () => {
    setShowReport(true);
  };

  const generatePDF = () => {
    if (!report) return;
    
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(0, 0, 255);
    doc.text('Curesen AI Health Report', 20, 20);
    
    // Add report content
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    
    const textLines = doc.splitTextToSize(report.report, 170);
    doc.text(textLines, 20, 40);
    
    // Add vital signs
    let yPosition = 40 + (textLines.length * 7);
    
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 255);
    doc.text('Vital Signs', 20, yPosition);
    
    doc.setFontSize(12);
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('Heart Rate:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.bpm} BPM`, 70, yPosition);
    
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('SpO2:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.spo2}%`, 70, yPosition);
    
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('Temperature:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.temp}°C`, 70, yPosition);
    
    yPosition += 20;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('Generated:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(new Date(report.timestamp).toLocaleString(), 70, yPosition);
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Curesen AI Health Monitoring System', 20, 280);
    
    doc.save('health-report.pdf');
  };

  const shareReport = async () => {
    if (!report) return;
    
    // Generate PDF for sharing
    const doc = new jsPDF();
    
    // Same PDF generation as above
    doc.setFontSize(20);
    doc.setTextColor(0, 0, 255);
    doc.text('Curesen AI Health Report', 20, 20);
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    
    const textLines = doc.splitTextToSize(report.report, 170);
    doc.text(textLines, 20, 40);
    
    let yPosition = 40 + (textLines.length * 7);
    
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 255);
    doc.text('Vital Signs', 20, yPosition);
    
    doc.setFontSize(12);
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('Heart Rate:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.bpm} BPM`, 70, yPosition);
    
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('SpO2:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.spo2}%`, 70, yPosition);
    
    yPosition += 10;
    doc.setTextColor(0, 0, 255);
    doc.setFont(undefined, 'bold');
    doc.text('Temperature:', 20, yPosition);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    doc.text(`${report.vitals.temp}°C`, 70, yPosition);
    
    const pdfBlob = doc.output('blob');
    
    try {
      if (navigator.share) {
        const file = new File([pdfBlob], 'health-report.pdf', { type: 'application/pdf' });
        await navigator.share({
          title: 'Curesen AI Health Report',
          text: 'Check out my health report from Curesen AI',
          files: [file]
        });
      } else {
        // Fallback for browsers that don't support navigator.share
        const pdfUrl = URL.createObjectURL(pdfBlob);
        window.open(pdfUrl, '_blank');
      }
    } catch (error) {
      console.error('Error sharing report:', error);
      alert('Could not share the report. Try downloading instead.');
    }
  };

  if (!report) {
    return (
      <ReportContainer>
        <h2>No Report Available</h2>
        <p>Connect to the device and wait for measurements to generate a report.</p>
      </ReportContainer>
    );
  }

  return (
    <ReportContainer>
      <h2>Health Report</h2>
      {!showReport ? (
        <ButtonGroup>
          <ActionButton primary onClick={handleViewReport}>
            View Report
          </ActionButton>
        </ButtonGroup>
      ) : (
        <>
          <ReportContent>
            <p>{report.report}</p>
            <h3>Vital Signs</h3>
            <p><VitalLabel>Heart Rate:</VitalLabel> {report.vitals.bpm} BPM</p>
            <p><VitalLabel>SpO2:</VitalLabel> {report.vitals.spo2}%</p>
            <p><VitalLabel>Temperature:</VitalLabel> {report.vitals.temp}°C</p>
            <TimeStamp>Generated: {new Date(report.timestamp).toLocaleString()}</TimeStamp>
          </ReportContent>
          
          <ButtonGroup>
            <ActionButton primary onClick={generatePDF}>
              <FiDownload /> Download Report
            </ActionButton>
            <ActionButton onClick={shareReport}>
              <FiShare2 /> Share Report
            </ActionButton>
          </ButtonGroup>
        </>
      )}
    </ReportContainer>
  );
};

export default Report;